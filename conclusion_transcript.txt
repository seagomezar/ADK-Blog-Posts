0:02
Congratulations, you've just completed the course.
0:04
You started with a basic agent
0:06
and built up to a multi-agent system
0:08
that you can speak to, which
0:09
has access to tools like Google search.
0:11
We built callbacks and fine-tuned instructions that control and modify the agent's
0:16
behavior. Finally, we saw different agents working together
0:19
to generate the final script and podcast.
0:22
Check out the resource section to
0:24
learn more about ADK and live agents.
0:26
You can now take what you have
0:28
learned and apply to any use case,
0:30
and we can't wait to see what you build with it.


Building AI News Podcast Agent with Google ADK
Appendix and Resources
This document serves as a reference guide for the "Building AI News Podcast Agent with Google ADK" course, containing all exercises, resources, and a troubleshooting guide to support your learning journey.

Table of Contents
All Course Exercises
Resources
Troubleshooting Guide
All Course Exercises
Lesson 1: Getting Started - Agent Foundations
ðŸŽ¯ Exercise: Customize your Agent
Exercise 1: Personality modification
Modify the instruction to make your agent have a specific personality while maintaining its AI news focus:

Make it more enthusiastic and excited about AI developments
Add a preference for explaining complex topics in simple terms
Have it always end responses with a relevant AI fact
Exercise 2: Testing boundaries
Test your enhanced agent thoroughly:

Ask it about current AI news vs non-AI topics, including edge cases (note the behavior)
Try voice interaction vs text interaction
Lesson 3:
Lesson 4:
Lesson 5: Instruction Tuning and Guardrails
ðŸŽ¯ Exercise: Build an Advanced Control System
Challenge: Extend the control system to support multiple data sources with different validation rules.

Exercise steps:
Add Data Source detection: Modify the callback to detect when users request different types of sources (news vs. research papers vs. market reports)

Implement dynamic whitelisting: Create different domain whitelists for different content types:

News: techcrunch.com, venturebeat.com, theverge.com
Research: arxiv.org, papers.nips.cc, aclanthology.org
Market: seekingalpha.com, marketwatch.com, bloomberg.com
Add Time-Based filtering: Implement a second callback that adds time constraints:

News: last 7 days
Research: last 30 days
Market: last 24 hours
Test Multi-Layer control: Try requests like:

"Find recent AI research papers"
"Get today's AI market news"
"What are the latest AI safety papers?"
Lesson 6:
Lesson 7:
Resources
Continue exploring the official documentation and sample projects to further enhance your agent development skills.

Official Documentation
ADK Python GitHub Repository: https://github.com/google/adk-python
ADK Java GitHub Repository: https://github.com/google/adk-java
ADK Documentation: https://google.github.io/adk-docs
Gemini API Documentation: https://ai.google.dev/gemini-api
Model Information: https://ai.google.dev/gemini-api/docs/models
Sample Agents: https://github.com/google/adk-samples
Installation and Setup
# Install ADK
pip install google-adk

# Create new agent project
adk create --type=code my_agent --model gemini-2.0-flash-live-001 --api_key YOUR_API_KEY

# Run ADK Web UI
adk web --host 0.0.0.0 --port 8000

# Run agent via command line
adk run

# Start API server
adk api_server
Development Tools
ADK CLI Commands: adk --help
Project Scaffolding: adk create --help
Web UI: Development and testing interface
API Server: Production deployment option
Community and Support
Community Documentation: https://google.github.io/adk-docs/community/
Reddit Community: https://www.reddit.com/r/agentdevelopmentkit/
GitHub Issues: For bug reports and feature requests
Contributing: See CONTRIBUTING.md in ADK repository
Sample Projects
Located in /adk-python/contributing/samples/:

adk_answering_agent/: Q&A agent implementation
adk_triaging_agent/: Issue triage automation
live_tool_callbacks_agent/: Live callback examples
session_state_agent/: State management examples
toolbox_agent/: Multiple tool integration
Troubleshooting Guide
Common Issues and Solutions
Agent Not Responding
Problem: Agent doesn't respond or gives generic answers Solutions:

Check API key configuration in .env file
Verify model name is correct (e.g., gemini-2.0-flash-live-001)
Review agent instructions for clarity and specificity
Check if tools are properly imported and added to tools array
Tool Execution Failures
Problem: Custom tools throw errors or don't execute Solutions:

Verify all function parameters have proper type hints
Check that tool returns the expected data structure
Review error handling within the tool function
Test tool function independently before adding to agent
Callback Issues
Problem: Callbacks not triggering or causing unexpected behavior Solutions:

Ensure callback functions have correct signature
Check return values (None vs. dictionary)
Verify callback is added to correct callback array
Review callback order (they execute in sequence)
Experiment with prompt tuning in the agent
State Management Problems
Problem: State not persisting or incorrect values Solutions:

Use correct state prefixes (user:, app:, temp:)
Avoid direct session.state modification outside callbacks
Use .get() method with default values
Verify state changes are made through proper context objects
Voice Interaction Issues
Problem: Voice features not working properly Solutions:

Ensure using gemini-2.0-flash-live-001 model
Check browser permissions for microphone access
Verify ADK Web UI is running on correct port
Test with text first, then switch to voice
Debugging Techniques
Enable Verbose Logging
import logging
logging.basicConfig(level=logging.DEBUG)
Add Debug Prints
def debug_callback(tool, args, tool_context):
    print(f"DEBUG: Tool {tool.name} called with args: {args}")
    print(f"DEBUG: Current state: {tool_context.state}")
    return None
Use Events Tab
Monitor tool executions in ADK Web UI Events tab
Check invocation IDs and timing
Review tool inputs and outputs
